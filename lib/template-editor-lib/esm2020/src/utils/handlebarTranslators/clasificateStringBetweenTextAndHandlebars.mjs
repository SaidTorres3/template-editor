export const clasificateStringBetweenTextAndHandlebars = (text) => {
    let result = [];
    const startHandlebar = '{{';
    const endHandlebar = '}}';
    const marginAmount = 30;
    let margin = 0;
    let stringStorage = '';
    for (let i = 0; i < text.length; i++) {
        const textFragment = text.substring(i, i + startHandlebar.length);
        if (textFragment === startHandlebar) {
            if (stringStorage) {
                result.push({
                    type: 'text',
                    value: stringStorage,
                    margin: margin
                });
            }
            stringStorage = text[i];
            if (text.substring(i + 2, i + 3) === '/') {
                margin -= marginAmount;
            }
            else if (text.substring(i + 2, i + 3) === '#') {
                margin += marginAmount;
            }
        }
        else if (textFragment === endHandlebar) {
            stringStorage += text.substring(i, i + endHandlebar.length);
            i = i + endHandlebar.length - 1;
            result.push({
                type: 'handlebar',
                value: stringStorage,
                margin: margin
            });
            stringStorage = "";
        }
        else {
            stringStorage += text[i];
        }
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc2lmaWNhdGVTdHJpbmdCZXR3ZWVuVGV4dEFuZEhhbmRsZWJhcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvdXRpbHMvaGFuZGxlYmFyVHJhbnNsYXRvcnMvY2xhc2lmaWNhdGVTdHJpbmdCZXR3ZWVuVGV4dEFuZEhhbmRsZWJhcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0seUNBQXlDLEdBQUcsQ0FBQyxJQUFZLEVBQXlCLEVBQUU7SUFDL0YsSUFBSSxNQUFNLEdBQTBCLEVBQUUsQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDNUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzFCLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN4QixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUE7SUFDdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxJQUFJLFlBQVksS0FBSyxjQUFjLEVBQUU7WUFDbkMsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ1YsSUFBSSxFQUFFLE1BQU07b0JBQ1osS0FBSyxFQUFFLGFBQWE7b0JBQ3BCLE1BQU0sRUFBRSxNQUFNO2lCQUNmLENBQUMsQ0FBQzthQUNKO1lBQ0QsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUN4QyxNQUFNLElBQUksWUFBWSxDQUFDO2FBQ3hCO2lCQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQy9DLE1BQU0sSUFBSSxZQUFZLENBQUM7YUFDeEI7U0FDRjthQUFNLElBQUksWUFBWSxLQUFLLFlBQVksRUFBRTtZQUN4QyxhQUFhLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1RCxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLEtBQUssRUFBRSxhQUFhO2dCQUNwQixNQUFNLEVBQUUsTUFBTTthQUNmLENBQUMsQ0FBQztZQUNILGFBQWEsR0FBRyxFQUFFLENBQUM7U0FDcEI7YUFBTTtZQUNMLGFBQWEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDekI7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZGFibGVJbnN0cnVjdGlvbiB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2xhc2lmaWNhdGVTdHJpbmdCZXR3ZWVuVGV4dEFuZEhhbmRsZWJhcnMgPSAodGV4dDogc3RyaW5nKTogUmVhZGFibGVJbnN0cnVjdGlvbltdID0+IHtcclxuICBsZXQgcmVzdWx0OiBSZWFkYWJsZUluc3RydWN0aW9uW10gPSBbXTtcclxuICBjb25zdCBzdGFydEhhbmRsZWJhciA9ICd7eyc7XHJcbiAgY29uc3QgZW5kSGFuZGxlYmFyID0gJ319JztcclxuICBjb25zdCBtYXJnaW5BbW91bnQgPSAzMDtcclxuICBsZXQgbWFyZ2luID0gMDtcclxuICBsZXQgc3RyaW5nU3RvcmFnZSA9ICcnXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCB0ZXh0RnJhZ21lbnQgPSB0ZXh0LnN1YnN0cmluZyhpLCBpICsgc3RhcnRIYW5kbGViYXIubGVuZ3RoKTtcclxuICAgIGlmICh0ZXh0RnJhZ21lbnQgPT09IHN0YXJ0SGFuZGxlYmFyKSB7XHJcbiAgICAgIGlmIChzdHJpbmdTdG9yYWdlKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1N0b3JhZ2UsXHJcbiAgICAgICAgICBtYXJnaW46IG1hcmdpblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHN0cmluZ1N0b3JhZ2UgPSB0ZXh0W2ldO1xyXG4gICAgICBpZiAodGV4dC5zdWJzdHJpbmcoaSArIDIsIGkgKyAzKSA9PT0gJy8nKSB7XHJcbiAgICAgICAgbWFyZ2luIC09IG1hcmdpbkFtb3VudDtcclxuICAgICAgfSBlbHNlIGlmICh0ZXh0LnN1YnN0cmluZyhpICsgMiwgaSArIDMpID09PSAnIycpIHtcclxuICAgICAgICBtYXJnaW4gKz0gbWFyZ2luQW1vdW50O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRleHRGcmFnbWVudCA9PT0gZW5kSGFuZGxlYmFyKSB7XHJcbiAgICAgIHN0cmluZ1N0b3JhZ2UgKz0gdGV4dC5zdWJzdHJpbmcoaSwgaSArIGVuZEhhbmRsZWJhci5sZW5ndGgpO1xyXG4gICAgICBpID0gaSArIGVuZEhhbmRsZWJhci5sZW5ndGggLSAxXHJcbiAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICB0eXBlOiAnaGFuZGxlYmFyJyxcclxuICAgICAgICB2YWx1ZTogc3RyaW5nU3RvcmFnZSxcclxuICAgICAgICBtYXJnaW46IG1hcmdpblxyXG4gICAgICB9KTtcclxuICAgICAgc3RyaW5nU3RvcmFnZSA9IFwiXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdHJpbmdTdG9yYWdlICs9IHRleHRbaV1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59Il19