import { Component, Input } from "@angular/core";
import { handlebarToInstruction } from "../../../../utils/handlebarTranslators/handlebarToReadableInstruction";
import { clasificateStringBetweenTextAndHandlebars } from "../../../../utils/handlebarTranslators/clasificateStringBetweenTextAndHandlebars";
import * as i0 from "@angular/core";
import * as i1 from "./variable-checker/variable-checker.component";
import * as i2 from "@angular/common";
import * as i3 from "../../../pipes/variable-exist.pipe";
export class ViewablePhraseComponent {
    constructor() {
        this.showModal = {
            phraseIndex: 0,
            showModal: false,
            modalPosition: { x: 0, y: 0 },
            arrowPosition: { x: 0 },
            data: undefined,
        };
        this.createClickoffListener = () => {
            window.addEventListener("click", () => {
                this.showModal.showModal = false;
            });
        };
    }
    ngAfterViewInit() {
        this.createClickoffListener();
    }
    showModalToggle(e, phraseIndex) {
        e.stopPropagation();
        this.showModal.phraseIndex = phraseIndex;
        this.showModal.showModal = !this.showModal.showModal;
        this.showModal.modalPosition.x = e.clientX;
        this.showModal.modalPosition.y = e.clientY - window.scrollY;
        this.translateHandlebarToInstructions(phraseIndex);
    }
    handlebarsToReadableIntructions(clasifiedText) {
        let result = [];
        result = clasifiedText.map((clasifiedTextOrHandlebar) => {
            if (clasifiedTextOrHandlebar.type === "handlebar") {
                clasifiedTextOrHandlebar = handlebarToInstruction(clasifiedTextOrHandlebar);
            }
            return clasifiedTextOrHandlebar;
        });
        return result;
    }
    translateHandlebarToInstructions(viewablePhraseIndex) {
        const handlebar = this.viewablePhrases[viewablePhraseIndex].value;
        const clasifiedText = clasificateStringBetweenTextAndHandlebars(handlebar);
        const readableInstructions = this.handlebarsToReadableIntructions(clasifiedText);
        this.showModal.data = readableInstructions;
    }
    setSearchData(e) {
        // get text from the clicked element
        e.stopImmediatePropagation();
        const element = e.target;
        this.workspace.searchData = element.innerHTML;
    }
    stopClickPropagation(e) {
        e.stopImmediatePropagation();
        e.stopPropagation();
    }
}
ViewablePhraseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ViewablePhraseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ViewablePhraseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ViewablePhraseComponent, selector: "viewable-phrases[viewablePhrases][data][workspace]", inputs: { viewablePhrases: "viewablePhrases", data: "data", workspace: "workspace" }, ngImport: i0, template: "<ng-container *ngIf=\"viewablePhrases\"> \r\n  <ng-container *ngFor=\"let viewablePhrase of viewablePhrases; let i = index\">\r\n    <div\r\n      [class.viewable-phrase--typed]=\"viewablePhrase.type !== 'text'\"\r\n      [class.viewable-phrase--if]=\"viewablePhrase.type === 'if'\"\r\n      [class.viewable-phrase--handlebar]=\"viewablePhrase.type === 'handlebar'\"\r\n      [class.viewable-phrase--each]=\"viewablePhrase.type === 'each'\"\r\n      style=\"position: relative;\"\r\n      class=\"viewable-phrase\"\r\n      type=\"text\"\r\n      spellcheck=\"true\"\r\n      (click)=\"viewablePhrase.type !== 'text' ? showModalToggle($event,i) : undefined\"\r\n    >\r\n      <span *ngIf=\"viewablePhrase.type === 'text'\"\r\n        >{{viewablePhrase.value}}</span\r\n      >\r\n      <ng-container *ngIf=\"viewablePhrase.type !== 'text'\">\r\n        <ng-container\r\n          *ngFor=\"let variableChecker of viewablePhrase.value|variableExist:data\"\r\n          comment=\"I have to force the variable viewablePhrase to be string\"\r\n        >\r\n          <variable-checker\r\n            [input]=\"variableChecker\"\r\n            (clickExistingVariable)=\"setSearchData($event)\"\r\n            (clickNonExistingVariable)=\"stopClickPropagation($event)\"\r\n            [hightlightExistingVariables]=\"true\"\r\n            comment=\"check later\"\r\n          ></variable-checker>\r\n        </ng-container>\r\n\r\n        <!-- translated-instruction-modal -->\r\n        <div\r\n          #popup\r\n          class=\"window-modal\"\r\n          *ngIf=\"showModal.showModal && showModal.phraseIndex === i\"\r\n          (click)=\"stopClickPropagation($event)\"\r\n        >\r\n          <div class=\"window-modal__notch\">\r\n            <div class=\"window-modal__notch__triangle\"></div>\r\n          </div>\r\n          <div\r\n            *ngFor=\"let readableInstruction of showModal.data\"\r\n            [style]=\"'margin-left: '+readableInstruction.margin+'px'\"\r\n            class=\"readable-intruction\"\r\n            [class.readable-intruction--if]=\"readableInstruction.handlebarType === 'if'\"\r\n            [class.readable-intruction--each]=\"readableInstruction.handlebarType === 'each'\"\r\n            [class.readable-intruction--variable]=\"readableInstruction.handlebarType === 'variable'\"\r\n          >\r\n            <!-- {{readableInstruction.value}} -->\r\n            <span *ngIf=\"readableInstruction.type === 'text'\"\r\n              >{{readableInstruction.value}}</span\r\n            >\r\n            <ng-container *ngIf=\"readableInstruction.type !== 'text'\">\r\n              <ng-container\r\n                *ngFor=\"let variableChecker of readableInstruction.value|variableExist:data\"\r\n              >\r\n                <!-- this clasificates the variable checker into if, each, or variable. In other words, colors the sentenses. -->\r\n                <variable-checker\r\n                  [input]=\"variableChecker\"\r\n                  (clickExistingVariable)=\"setSearchData($event)\"\r\n                  [hightlightExistingVariables]=\"true\"\r\n                ></variable-checker>\r\n              </ng-container>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</ng-container>\r\n", styles: ["*{--if-color: #1196d870;--handlebar-color: #7bd81170;--each-color: #ffae0070}.viewable-phrase-container{display:inline}.viewable-phrase{white-space:pre-wrap;outline-color:#1196d8;position:relative;font-size:13.4px;font-family:Arial;line-height:23px;box-sizing:border-box;display:inline;resize:none;cursor:default}.viewable-phrase--typed{cursor:pointer}.viewable-phrase--typed:hover{-webkit-user-select:none;user-select:none;outline:2px solid #ff0000}.viewable-phrase--if{background-color:var(--if-color)}.viewable-phrase--handlebar{background-color:var(--handlebar-color)}.viewable-phrase--each{background-color:var(--each-color)}.readable-intruction--if{background-color:var(--if-color)}.readable-intruction--each{background-color:var(--each-color)}.readable-intruction--variable{background-color:var(--handlebar-color)}.window-modal{height:-moz-fit-content;height:fit-content;width:300px;max-height:460px;resize:both;overflow:auto;background-color:#fff;z-index:2000;padding:8px;position:absolute;border:dotted;left:0;box-shadow:0 0 5px #000}.window-modal__notch{top:-18px;position:relative;left:0;width:0;height:0;z-index:10}.window-modal__notch__triangle{--shape-width: 8px;border-left:calc(var(--shape-width) * .5) solid transparent;border-right:calc(var(--shape-width) * .5) solid transparent;border-bottom:var(--shape-width) solid black}\n"], components: [{ type: i1.VariableCheckerComponent, selector: "variable-checker[input]", inputs: ["input", "hightlightExistingVariables"], outputs: ["clickExistingVariable", "clickNonExistingVariable"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "variableExist": i3.VariableExistPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ViewablePhraseComponent, decorators: [{
            type: Component,
            args: [{ selector: "viewable-phrases[viewablePhrases][data][workspace]", template: "<ng-container *ngIf=\"viewablePhrases\"> \r\n  <ng-container *ngFor=\"let viewablePhrase of viewablePhrases; let i = index\">\r\n    <div\r\n      [class.viewable-phrase--typed]=\"viewablePhrase.type !== 'text'\"\r\n      [class.viewable-phrase--if]=\"viewablePhrase.type === 'if'\"\r\n      [class.viewable-phrase--handlebar]=\"viewablePhrase.type === 'handlebar'\"\r\n      [class.viewable-phrase--each]=\"viewablePhrase.type === 'each'\"\r\n      style=\"position: relative;\"\r\n      class=\"viewable-phrase\"\r\n      type=\"text\"\r\n      spellcheck=\"true\"\r\n      (click)=\"viewablePhrase.type !== 'text' ? showModalToggle($event,i) : undefined\"\r\n    >\r\n      <span *ngIf=\"viewablePhrase.type === 'text'\"\r\n        >{{viewablePhrase.value}}</span\r\n      >\r\n      <ng-container *ngIf=\"viewablePhrase.type !== 'text'\">\r\n        <ng-container\r\n          *ngFor=\"let variableChecker of viewablePhrase.value|variableExist:data\"\r\n          comment=\"I have to force the variable viewablePhrase to be string\"\r\n        >\r\n          <variable-checker\r\n            [input]=\"variableChecker\"\r\n            (clickExistingVariable)=\"setSearchData($event)\"\r\n            (clickNonExistingVariable)=\"stopClickPropagation($event)\"\r\n            [hightlightExistingVariables]=\"true\"\r\n            comment=\"check later\"\r\n          ></variable-checker>\r\n        </ng-container>\r\n\r\n        <!-- translated-instruction-modal -->\r\n        <div\r\n          #popup\r\n          class=\"window-modal\"\r\n          *ngIf=\"showModal.showModal && showModal.phraseIndex === i\"\r\n          (click)=\"stopClickPropagation($event)\"\r\n        >\r\n          <div class=\"window-modal__notch\">\r\n            <div class=\"window-modal__notch__triangle\"></div>\r\n          </div>\r\n          <div\r\n            *ngFor=\"let readableInstruction of showModal.data\"\r\n            [style]=\"'margin-left: '+readableInstruction.margin+'px'\"\r\n            class=\"readable-intruction\"\r\n            [class.readable-intruction--if]=\"readableInstruction.handlebarType === 'if'\"\r\n            [class.readable-intruction--each]=\"readableInstruction.handlebarType === 'each'\"\r\n            [class.readable-intruction--variable]=\"readableInstruction.handlebarType === 'variable'\"\r\n          >\r\n            <!-- {{readableInstruction.value}} -->\r\n            <span *ngIf=\"readableInstruction.type === 'text'\"\r\n              >{{readableInstruction.value}}</span\r\n            >\r\n            <ng-container *ngIf=\"readableInstruction.type !== 'text'\">\r\n              <ng-container\r\n                *ngFor=\"let variableChecker of readableInstruction.value|variableExist:data\"\r\n              >\r\n                <!-- this clasificates the variable checker into if, each, or variable. In other words, colors the sentenses. -->\r\n                <variable-checker\r\n                  [input]=\"variableChecker\"\r\n                  (clickExistingVariable)=\"setSearchData($event)\"\r\n                  [hightlightExistingVariables]=\"true\"\r\n                ></variable-checker>\r\n              </ng-container>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</ng-container>\r\n", styles: ["*{--if-color: #1196d870;--handlebar-color: #7bd81170;--each-color: #ffae0070}.viewable-phrase-container{display:inline}.viewable-phrase{white-space:pre-wrap;outline-color:#1196d8;position:relative;font-size:13.4px;font-family:Arial;line-height:23px;box-sizing:border-box;display:inline;resize:none;cursor:default}.viewable-phrase--typed{cursor:pointer}.viewable-phrase--typed:hover{-webkit-user-select:none;user-select:none;outline:2px solid #ff0000}.viewable-phrase--if{background-color:var(--if-color)}.viewable-phrase--handlebar{background-color:var(--handlebar-color)}.viewable-phrase--each{background-color:var(--each-color)}.readable-intruction--if{background-color:var(--if-color)}.readable-intruction--each{background-color:var(--each-color)}.readable-intruction--variable{background-color:var(--handlebar-color)}.window-modal{height:-moz-fit-content;height:fit-content;width:300px;max-height:460px;resize:both;overflow:auto;background-color:#fff;z-index:2000;padding:8px;position:absolute;border:dotted;left:0;box-shadow:0 0 5px #000}.window-modal__notch{top:-18px;position:relative;left:0;width:0;height:0;z-index:10}.window-modal__notch__triangle{--shape-width: 8px;border-left:calc(var(--shape-width) * .5) solid transparent;border-right:calc(var(--shape-width) * .5) solid transparent;border-bottom:var(--shape-width) solid black}\n"] }]
        }], propDecorators: { viewablePhrases: [{
                type: Input
            }], data: [{
                type: Input
            }], workspace: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2FibGUtcGhyYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy93b3Jrc3BhY2Uvdmlld2FibGUtcGhyYXNlL3ZpZXdhYmxlLXBocmFzZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL2NvbXBvbmVudHMvd29ya3NwYWNlL3ZpZXdhYmxlLXBocmFzZS92aWV3YWJsZS1waHJhc2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRWhFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBRS9HLE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxNQUFNLGtGQUFrRixDQUFDOzs7OztBQVE3SSxNQUFNLE9BQU8sdUJBQXVCO0lBTHBDO1FBVVMsY0FBUyxHQUFjO1lBQzVCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsU0FBUyxFQUFFLEtBQUs7WUFDaEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzdCLGFBQWEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxFQUFFLFNBQVM7U0FDaEIsQ0FBQztRQU1NLDJCQUFzQixHQUFHLEdBQUcsRUFBRTtZQUNwQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0tBOENIO0lBdERDLGVBQWU7UUFDYixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBUU0sZUFBZSxDQUFDLENBQWEsRUFBRSxXQUFtQjtRQUN2RCxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM1RCxJQUFJLENBQUMsZ0NBQWdDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVNLCtCQUErQixDQUNwQyxhQUFvQztRQUVwQyxJQUFJLE1BQU0sR0FBMEIsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsd0JBQXdCLEVBQUUsRUFBRTtZQUN0RCxJQUFJLHdCQUF3QixDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7Z0JBQ2pELHdCQUF3QixHQUFHLHNCQUFzQixDQUMvQyx3QkFBd0IsQ0FDekIsQ0FBQzthQUNIO1lBQ0QsT0FBTyx3QkFBd0IsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxnQ0FBZ0MsQ0FBQyxtQkFBMkI7UUFDakUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEtBQWUsQ0FBQztRQUM1RSxNQUFNLGFBQWEsR0FBRyx5Q0FBeUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRSxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQywrQkFBK0IsQ0FDL0QsYUFBYSxDQUNkLENBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxvQkFBb0IsQ0FBQztJQUM3QyxDQUFDO0lBRU0sYUFBYSxDQUFDLENBQWE7UUFDaEMsb0NBQW9DO1FBQ3BDLENBQUMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQzdCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFxQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDaEQsQ0FBQztJQUVNLG9CQUFvQixDQUFDLENBQWE7UUFDdkMsQ0FBQyxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7O29IQWxFVSx1QkFBdUI7d0dBQXZCLHVCQUF1QixnTENacEMsbXdHQXNFQTsyRkQxRGEsdUJBQXVCO2tCQUxuQyxTQUFTOytCQUNFLG9EQUFvRDs4QkFLckQsZUFBZTtzQkFBdkIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBWaWV3YWJsZVBocmFzZSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9kb2N4UGFyc2Vycy90eXBlc1wiO1xyXG5pbXBvcnQgeyBoYW5kbGViYXJUb0luc3RydWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2hhbmRsZWJhclRyYW5zbGF0b3JzL2hhbmRsZWJhclRvUmVhZGFibGVJbnN0cnVjdGlvblwiO1xyXG5pbXBvcnQgeyBSZWFkYWJsZUluc3RydWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2hhbmRsZWJhclRyYW5zbGF0b3JzL3R5cGVzXCI7XHJcbmltcG9ydCB7IGNsYXNpZmljYXRlU3RyaW5nQmV0d2VlblRleHRBbmRIYW5kbGViYXJzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2hhbmRsZWJhclRyYW5zbGF0b3JzL2NsYXNpZmljYXRlU3RyaW5nQmV0d2VlblRleHRBbmRIYW5kbGViYXJzXCI7XHJcbmltcG9ydCB7IFdvcmtTcGFjZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9hcHAvaW50ZXJmYWNlc1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwidmlld2FibGUtcGhyYXNlc1t2aWV3YWJsZVBocmFzZXNdW2RhdGFdW3dvcmtzcGFjZV1cIixcclxuICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXdhYmxlLXBocmFzZS5jb21wb25lbnQuaHRtbFwiLFxyXG4gIHN0eWxlVXJsczogW1wiLi92aWV3YWJsZS1waHJhc2UuY29tcG9uZW50Lmxlc3NcIl0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBWaWV3YWJsZVBocmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIHZpZXdhYmxlUGhyYXNlczogVmlld2FibGVQaHJhc2VbXTtcclxuICBASW5wdXQoKSBkYXRhOiBhbnk7XHJcbiAgQElucHV0KCkgd29ya3NwYWNlOiBXb3JrU3BhY2U7XHJcblxyXG4gIHB1YmxpYyBzaG93TW9kYWw6IFNob3dNb2RhbCA9IHtcclxuICAgIHBocmFzZUluZGV4OiAwLFxyXG4gICAgc2hvd01vZGFsOiBmYWxzZSxcclxuICAgIG1vZGFsUG9zaXRpb246IHsgeDogMCwgeTogMCB9LFxyXG4gICAgYXJyb3dQb3NpdGlvbjogeyB4OiAwIH0sXHJcbiAgICBkYXRhOiB1bmRlZmluZWQsXHJcbiAgfTtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jcmVhdGVDbGlja29mZkxpc3RlbmVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUNsaWNrb2ZmTGlzdGVuZXIgPSAoKSA9PiB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5zaG93TW9kYWwuc2hvd01vZGFsID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgc2hvd01vZGFsVG9nZ2xlKGU6IE1vdXNlRXZlbnQsIHBocmFzZUluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLnNob3dNb2RhbC5waHJhc2VJbmRleCA9IHBocmFzZUluZGV4O1xyXG4gICAgdGhpcy5zaG93TW9kYWwuc2hvd01vZGFsID0gIXRoaXMuc2hvd01vZGFsLnNob3dNb2RhbDtcclxuICAgIHRoaXMuc2hvd01vZGFsLm1vZGFsUG9zaXRpb24ueCA9IGUuY2xpZW50WDtcclxuICAgIHRoaXMuc2hvd01vZGFsLm1vZGFsUG9zaXRpb24ueSA9IGUuY2xpZW50WSAtIHdpbmRvdy5zY3JvbGxZO1xyXG4gICAgdGhpcy50cmFuc2xhdGVIYW5kbGViYXJUb0luc3RydWN0aW9ucyhwaHJhc2VJbmRleCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFuZGxlYmFyc1RvUmVhZGFibGVJbnRydWN0aW9ucyhcclxuICAgIGNsYXNpZmllZFRleHQ6IFJlYWRhYmxlSW5zdHJ1Y3Rpb25bXVxyXG4gICk6IFJlYWRhYmxlSW5zdHJ1Y3Rpb25bXSB7XHJcbiAgICBsZXQgcmVzdWx0OiBSZWFkYWJsZUluc3RydWN0aW9uW10gPSBbXTtcclxuICAgIHJlc3VsdCA9IGNsYXNpZmllZFRleHQubWFwKChjbGFzaWZpZWRUZXh0T3JIYW5kbGViYXIpID0+IHtcclxuICAgICAgaWYgKGNsYXNpZmllZFRleHRPckhhbmRsZWJhci50eXBlID09PSBcImhhbmRsZWJhclwiKSB7XHJcbiAgICAgICAgY2xhc2lmaWVkVGV4dE9ySGFuZGxlYmFyID0gaGFuZGxlYmFyVG9JbnN0cnVjdGlvbihcclxuICAgICAgICAgIGNsYXNpZmllZFRleHRPckhhbmRsZWJhclxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNsYXNpZmllZFRleHRPckhhbmRsZWJhcjtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0cmFuc2xhdGVIYW5kbGViYXJUb0luc3RydWN0aW9ucyh2aWV3YWJsZVBocmFzZUluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGhhbmRsZWJhciA9IHRoaXMudmlld2FibGVQaHJhc2VzW3ZpZXdhYmxlUGhyYXNlSW5kZXhdLnZhbHVlIGFzIHN0cmluZztcclxuICAgIGNvbnN0IGNsYXNpZmllZFRleHQgPSBjbGFzaWZpY2F0ZVN0cmluZ0JldHdlZW5UZXh0QW5kSGFuZGxlYmFycyhoYW5kbGViYXIpO1xyXG4gICAgY29uc3QgcmVhZGFibGVJbnN0cnVjdGlvbnMgPSB0aGlzLmhhbmRsZWJhcnNUb1JlYWRhYmxlSW50cnVjdGlvbnMoXHJcbiAgICAgIGNsYXNpZmllZFRleHRcclxuICAgICk7XHJcbiAgICB0aGlzLnNob3dNb2RhbC5kYXRhID0gcmVhZGFibGVJbnN0cnVjdGlvbnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0U2VhcmNoRGF0YShlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAvLyBnZXQgdGV4dCBmcm9tIHRoZSBjbGlja2VkIGVsZW1lbnRcclxuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICB0aGlzLndvcmtzcGFjZS5zZWFyY2hEYXRhID0gZWxlbWVudC5pbm5lckhUTUw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RvcENsaWNrUHJvcGFnYXRpb24oZTogTW91c2VFdmVudCkge1xyXG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU2hvd01vZGFsIHtcclxuICBzaG93TW9kYWw6IGJvb2xlYW47XHJcbiAgcGhyYXNlSW5kZXg6IG51bWJlcjtcclxuICBtb2RhbFBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH07XHJcbiAgYXJyb3dQb3NpdGlvbjogeyB4OiBudW1iZXIgfTtcclxuICBkYXRhOiBSZWFkYWJsZUluc3RydWN0aW9uW10gfCB1bmRlZmluZWQ7XHJcbn1cclxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInZpZXdhYmxlUGhyYXNlc1wiPiBcclxuICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCB2aWV3YWJsZVBocmFzZSBvZiB2aWV3YWJsZVBocmFzZXM7IGxldCBpID0gaW5kZXhcIj5cclxuICAgIDxkaXZcclxuICAgICAgW2NsYXNzLnZpZXdhYmxlLXBocmFzZS0tdHlwZWRdPVwidmlld2FibGVQaHJhc2UudHlwZSAhPT0gJ3RleHQnXCJcclxuICAgICAgW2NsYXNzLnZpZXdhYmxlLXBocmFzZS0taWZdPVwidmlld2FibGVQaHJhc2UudHlwZSA9PT0gJ2lmJ1wiXHJcbiAgICAgIFtjbGFzcy52aWV3YWJsZS1waHJhc2UtLWhhbmRsZWJhcl09XCJ2aWV3YWJsZVBocmFzZS50eXBlID09PSAnaGFuZGxlYmFyJ1wiXHJcbiAgICAgIFtjbGFzcy52aWV3YWJsZS1waHJhc2UtLWVhY2hdPVwidmlld2FibGVQaHJhc2UudHlwZSA9PT0gJ2VhY2gnXCJcclxuICAgICAgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7XCJcclxuICAgICAgY2xhc3M9XCJ2aWV3YWJsZS1waHJhc2VcIlxyXG4gICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgIHNwZWxsY2hlY2s9XCJ0cnVlXCJcclxuICAgICAgKGNsaWNrKT1cInZpZXdhYmxlUGhyYXNlLnR5cGUgIT09ICd0ZXh0JyA/IHNob3dNb2RhbFRvZ2dsZSgkZXZlbnQsaSkgOiB1bmRlZmluZWRcIlxyXG4gICAgPlxyXG4gICAgICA8c3BhbiAqbmdJZj1cInZpZXdhYmxlUGhyYXNlLnR5cGUgPT09ICd0ZXh0J1wiXHJcbiAgICAgICAgPnt7dmlld2FibGVQaHJhc2UudmFsdWV9fTwvc3BhblxyXG4gICAgICA+XHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ2aWV3YWJsZVBocmFzZS50eXBlICE9PSAndGV4dCdcIj5cclxuICAgICAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgdmFyaWFibGVDaGVja2VyIG9mIHZpZXdhYmxlUGhyYXNlLnZhbHVlfHZhcmlhYmxlRXhpc3Q6ZGF0YVwiXHJcbiAgICAgICAgICBjb21tZW50PVwiSSBoYXZlIHRvIGZvcmNlIHRoZSB2YXJpYWJsZSB2aWV3YWJsZVBocmFzZSB0byBiZSBzdHJpbmdcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIDx2YXJpYWJsZS1jaGVja2VyXHJcbiAgICAgICAgICAgIFtpbnB1dF09XCJ2YXJpYWJsZUNoZWNrZXJcIlxyXG4gICAgICAgICAgICAoY2xpY2tFeGlzdGluZ1ZhcmlhYmxlKT1cInNldFNlYXJjaERhdGEoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIChjbGlja05vbkV4aXN0aW5nVmFyaWFibGUpPVwic3RvcENsaWNrUHJvcGFnYXRpb24oJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIFtoaWdodGxpZ2h0RXhpc3RpbmdWYXJpYWJsZXNdPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgIGNvbW1lbnQ9XCJjaGVjayBsYXRlclwiXHJcbiAgICAgICAgICA+PC92YXJpYWJsZS1jaGVja2VyPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG5cclxuICAgICAgICA8IS0tIHRyYW5zbGF0ZWQtaW5zdHJ1Y3Rpb24tbW9kYWwgLS0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgI3BvcHVwXHJcbiAgICAgICAgICBjbGFzcz1cIndpbmRvdy1tb2RhbFwiXHJcbiAgICAgICAgICAqbmdJZj1cInNob3dNb2RhbC5zaG93TW9kYWwgJiYgc2hvd01vZGFsLnBocmFzZUluZGV4ID09PSBpXCJcclxuICAgICAgICAgIChjbGljayk9XCJzdG9wQ2xpY2tQcm9wYWdhdGlvbigkZXZlbnQpXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwid2luZG93LW1vZGFsX19ub3RjaFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwid2luZG93LW1vZGFsX19ub3RjaF9fdHJpYW5nbGVcIj48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgcmVhZGFibGVJbnN0cnVjdGlvbiBvZiBzaG93TW9kYWwuZGF0YVwiXHJcbiAgICAgICAgICAgIFtzdHlsZV09XCInbWFyZ2luLWxlZnQ6ICcrcmVhZGFibGVJbnN0cnVjdGlvbi5tYXJnaW4rJ3B4J1wiXHJcbiAgICAgICAgICAgIGNsYXNzPVwicmVhZGFibGUtaW50cnVjdGlvblwiXHJcbiAgICAgICAgICAgIFtjbGFzcy5yZWFkYWJsZS1pbnRydWN0aW9uLS1pZl09XCJyZWFkYWJsZUluc3RydWN0aW9uLmhhbmRsZWJhclR5cGUgPT09ICdpZidcIlxyXG4gICAgICAgICAgICBbY2xhc3MucmVhZGFibGUtaW50cnVjdGlvbi0tZWFjaF09XCJyZWFkYWJsZUluc3RydWN0aW9uLmhhbmRsZWJhclR5cGUgPT09ICdlYWNoJ1wiXHJcbiAgICAgICAgICAgIFtjbGFzcy5yZWFkYWJsZS1pbnRydWN0aW9uLS12YXJpYWJsZV09XCJyZWFkYWJsZUluc3RydWN0aW9uLmhhbmRsZWJhclR5cGUgPT09ICd2YXJpYWJsZSdcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8IS0tIHt7cmVhZGFibGVJbnN0cnVjdGlvbi52YWx1ZX19IC0tPlxyXG4gICAgICAgICAgICA8c3BhbiAqbmdJZj1cInJlYWRhYmxlSW5zdHJ1Y3Rpb24udHlwZSA9PT0gJ3RleHQnXCJcclxuICAgICAgICAgICAgICA+e3tyZWFkYWJsZUluc3RydWN0aW9uLnZhbHVlfX08L3NwYW5cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwicmVhZGFibGVJbnN0cnVjdGlvbi50eXBlICE9PSAndGV4dCdcIj5cclxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgdmFyaWFibGVDaGVja2VyIG9mIHJlYWRhYmxlSW5zdHJ1Y3Rpb24udmFsdWV8dmFyaWFibGVFeGlzdDpkYXRhXCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8IS0tIHRoaXMgY2xhc2lmaWNhdGVzIHRoZSB2YXJpYWJsZSBjaGVja2VyIGludG8gaWYsIGVhY2gsIG9yIHZhcmlhYmxlLiBJbiBvdGhlciB3b3JkcywgY29sb3JzIHRoZSBzZW50ZW5zZXMuIC0tPlxyXG4gICAgICAgICAgICAgICAgPHZhcmlhYmxlLWNoZWNrZXJcclxuICAgICAgICAgICAgICAgICAgW2lucHV0XT1cInZhcmlhYmxlQ2hlY2tlclwiXHJcbiAgICAgICAgICAgICAgICAgIChjbGlja0V4aXN0aW5nVmFyaWFibGUpPVwic2V0U2VhcmNoRGF0YSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgW2hpZ2h0bGlnaHRFeGlzdGluZ1ZhcmlhYmxlc109XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgID48L3ZhcmlhYmxlLWNoZWNrZXI+XHJcbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9uZy1jb250YWluZXI+XHJcbjwvbmctY29udGFpbmVyPlxyXG4iXX0=